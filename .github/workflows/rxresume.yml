name: "Deploy rxresume"
on:
  push:
    paths:
    - 'rxresume/**'
    - '.github/workflows/rxresume.yml'
    branches:
    - main
  workflow_dispatch:


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }} 
  SSH_KEY: ${{ secrets.SSH_KEY }}

jobs:
  terraform-CI:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rxresume

    steps:
     - name: Checkout code
       uses: actions/checkout@v3

     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v2
       with:
          terraform_version: latest
          terraform_wrapper: false

    
     - name: Create bucket if dosn't exists
       env:
        SCRIPT_DIR: ${{ github.workspace }}/rxresume/scripts
       run: bash $SCRIPT_DIR/create-s3.sh > output.log

     - name: Terraform Init
       run: terraform init -var="SSH_KEY=${{ secrets.SSH_KEY }}"

     - name: Terraform Plan
       run: terraform plan -var="SSH_KEY=${{ secrets.SSH_KEY }}" -lock=false -no-color

     - name: Terraform Apply
       if: "!contains(github.event.head_commit.message, 'destroy')"
       run: terraform apply -var="SSH_KEY=${{ secrets.SSH_KEY }}" -auto-approve -lock=false

     - name: Terraform Destroy
       if: contains(github.event.head_commit.message, 'destroy')
       run: terraform destroy  -var="SSH_KEY=${{ secrets.SSH_KEY }}" -auto-approve -lock=false

  terraform-CD:
    name: "Terraform Deploy"
    needs: 
        - terraform-CI
    if: "!contains(github.event.head_commit.message, 'destroy') "
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rxresume
    steps:
      - name: Clon Rep
        uses: actions/checkout@v3  

      - name: Получение IP-адреса EC2
        id: get-ip
        run: |
          TAG_KEY="Name"
          TAG_VALUE="app-server1"
          IP_ADDRESS=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:$TAG_KEY,Values=$TAG_VALUE" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "IP-адрес EC2: $IP_ADDRESS"

      - name: Вывод IP-адреса
        run: |
          echo "IP-адрес EC2: ${{ steps.get-ip.outputs.IP_ADDRESS }}"


      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: whoami