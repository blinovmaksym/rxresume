name: "Deploy rxresume"
on:
  push:
    paths:
    - 'rxresume/**'
    - '.github/workflows/rxresume.yml'
    branches:
    - main
  workflow_dispatch:


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }} 
  SSH_KEY: ${{ secrets.SSH_KEY }}
  username: ${{ secrets.SSH_USERNAME }}
  key: ${{ secrets.SSH_KEY_PRIVATE }}
  port: ${{ secrets.SSH_PORT }}

jobs:
  # terraform-CI:
  #   name: "Terraform"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: rxresume

  #   steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v3

  #    - name: Setup Terraform
  #      uses: hashicorp/setup-terraform@v2
  #      with:
  #         terraform_version: latest
  #         terraform_wrapper: false

    
  #    - name: Create bucket if dosn't exists
  #      env:
  #       SCRIPT_DIR: ${{ github.workspace }}/rxresume/scripts
  #      run: bash $SCRIPT_DIR/create-s3.sh > output.log

  #    - name: Terraform Init
  #      run: terraform init -var="SSH_KEY=${{ secrets.SSH_KEY }}"

  #    - name: Terraform Plan
  #      run: terraform plan -var="SSH_KEY=${{ secrets.SSH_KEY }}" -lock=false -no-color

  #    - name: Terraform Apply
  #      if: "!contains(github.event.head_commit.message, 'destroy')"
  #      run: terraform apply -var="SSH_KEY=${{ secrets.SSH_KEY }}" -auto-approve -lock=false

  #    - name: Terraform Destroy
  #      if: contains(github.event.head_commit.message, 'destroy')
  #      run: terraform destroy  -var="SSH_KEY=${{ secrets.SSH_KEY }}" -auto-approve -lock=false

  terraform-CD:
    name: "Terraform Deploy"
    # needs: 
    #     - terraform-CI
    if: "!contains(github.event.head_commit.message, 'destroy') "
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rxresume
    steps:
      - name: Clon Rep
        uses: actions/checkout@v3  

      - name: Получение IP-адреса EC2
        id: get-ip
        run: |
          TAG_KEY="Name"
          TAG_VALUE="app-server1"
          IP_ADDRESS=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:$TAG_KEY,Values=$TAG_VALUE" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "IP-адрес EC2: $IP_ADDRESS"
          echo "::set-output name=ip-address::$IP_ADDRESS"

      - name: Вывод IP-адреса
        run: |
          echo "IP-адрес EC2: ${{ steps.get-ip.outputs.ip-address }}"

      - name: Configure SSH
        if: contains(github.event.head_commit.message, 'init')
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.ip-address }} >> ~/.ssh/known_hosts

      - name: Run commands on the instance
        if: contains(github.event.head_commit.message, 'init')
        env:
          SCRIPT_DIR: ${{ github.workspace }}/rxresume/scripts
          PUBLIC_URL: ${{ steps.get-ip.outputs.ip-address }}
          PUBLIC_SERVER_URL: ${{ steps.get-ip.outputs.ip-address }}
        run: |
          # Create Folder scripts
          ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} 'if [ ! -d "scripts" ]; then mkdir scripts; fi'
          # Copy Scripts install.sh  on Remote PC
          scp $SCRIPT_DIR/install.sh ubuntu@${{ steps.get-ip.outputs.ip-address }}:/home/ubuntu/scripts
          # Copy Scripts change_dockerfile.sh  on Remote PC
          scp $SCRIPT_DIR/change_dockerfile.sh ubuntu@${{ steps.get-ip.outputs.ip-address }}:/home/ubuntu/scripts

          # Подключение к удаленному серверу и выполнение скрипта
          ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "bash /home/ubuntu/scripts/install.sh"
      #     echo "wait 20sec"
      #     sleep 20
      #     # Проверка успешного запуска сервера
      #     ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "docker logs app-server-1" | grep -q "Server is up and running!"
      #     if [ $? -eq 0 ]; then
      #       echo "Server is up and running!"
      #     else
      #       echo "Server failed to start!"
      #       exit 1
      #     fi
      # - name: Run commands on the instance
      #   run : |
        #  echo " Visit Your Site: http://${{ steps.get-ip.outputs.ip-address }}:3000"






