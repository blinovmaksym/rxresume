name: "Deploy rxresume"
on:
  push:
    paths:
    - 'rxresume/**'
    - '.github/workflows/rxresume.yml'
    branches:
    - main
  workflow_dispatch:


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }} 
  SSH_KEY: ${{ secrets.SSH_KEY }}
  username: ${{ secrets.SSH_USERNAME }}
  key: ${{ secrets.SSH_KEY_PRIVATE }}
  port: ${{ secrets.SSH_PORT }}

jobs:
  terraform-CI:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rxresume

    steps:
     - name: Checkout code
       uses: actions/checkout@v3

     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v2
       with:
          terraform_version: latest
          terraform_wrapper: false

    
     - name: Create bucket if dosn't exists
       env:
        SCRIPT_DIR: ${{ github.workspace }}/rxresume/scripts
       run: bash $SCRIPT_DIR/create-s3.sh > output.log

     - name: Terraform Init
       run: terraform init -var="SSH_KEY=${{ secrets.SSH_KEY }}"

     - name: Terraform Plan
       run: terraform plan -var="SSH_KEY=${{ secrets.SSH_KEY }}" -lock=false -no-color

     - name: Terraform Apply
       if: "!contains(github.event.head_commit.message, 'destroy')"
       run: terraform apply -var="SSH_KEY=${{ secrets.SSH_KEY }}" -auto-approve -lock=false

     - name: Terraform Destroy
       if: contains(github.event.head_commit.message, 'destroy')
       run: terraform destroy  -var="SSH_KEY=${{ secrets.SSH_KEY }}" -auto-approve -lock=false

  terraform-CD:
    name: "Terraform Deploy"
    needs: 
        - terraform-CI
    if: "!contains(github.event.head_commit.message, 'destroy') "
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rxresume
    steps:
      - name: Clon Rep
        uses: actions/checkout@v3  

      # - name: wait 3 minutes
      #   run: |
      #     echo "wait 3 minutes"
      #     sleep 180

      - name: Get IP-adress EC2
        id: get-ip
        run: |
          TAG_KEY="Name"
          TAG_VALUE="app-server"
          IP_ADDRESS=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:$TAG_KEY,Values=$TAG_VALUE" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "IP-адрес EC2: $IP_ADDRESS"
          echo "::set-output name=ip-address::$IP_ADDRESS"

      - name: Get Host RDS
        id: get-rds-hostname
        run: |
          TAG_VALUE="my-rds-instance"
          HOSTNAME=$(aws rds describe-db-instances --db-instance-identifier $TAG_VALUE --query "DBInstances[0].Endpoint.Address" --output text)
          echo "Host RDS: $HOSTNAME"
          echo "::set-output name=rds-hostname::$HOSTNAME"


      - name: Configure SSH
        if: contains(github.event.head_commit.message, 'init')
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.ip-address }} >> ~/.ssh/known_hosts

      - name: Run commands on the instance
        if: contains(github.event.head_commit.message, 'init')
        env:
          SCRIPT_DIR: ${{ github.workspace }}/rxresume/scripts
          PUBLIC_URL: ${{ steps.get-ip.outputs.ip-address }}
          POSTGRES_HOST: ${{ steps.get-rds-hostname.outputs.rds-hostname }}
          TAG_VALUE: "app-server"
        run: |

          # Create Folder scripts
          ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} 'if [ ! -d "scripts" ]; then mkdir scripts; fi'

          # Copy Scripts install.sh  on Remote PC
          scp $SCRIPT_DIR/install.sh ubuntu@${{ steps.get-ip.outputs.ip-address }}:/home/ubuntu/scripts

          # Copy Scripts change_dockerfile.sh  on Remote PC
          scp $SCRIPT_DIR/change_dockerfile.sh ubuntu@${{ steps.get-ip.outputs.ip-address }}:/home/ubuntu/scripts

          # Connect to Remote PC and execute Scripts
          ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "PUBLIC_URL=${PUBLIC_URL} POSTGRES_HOST=${POSTGRES_HOST} bash /home/ubuntu/scripts/install.sh"

          # Wait 20sec
          echo "wait 20sec"
          sleep 20

          # Check if the error occurred and restart if necessary
          if ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "[[ \$(docker compose up 2>&1) =~ \"could not find /home/ubuntu/app/server" ]]"; then
            echo "Error - could not find /home/ubuntu/app/server"
            ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "docker stop \$(docker ps -aq)"
            ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "docker rm \$(docker ps -aq)"
            ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "docker compose up -d --remove-orphans"
          fi

          # Check Service
          ssh ubuntu@${{ steps.get-ip.outputs.ip-address }} "docker logs $TAG_VALUE" | grep -q "Server is up and running!"
          if [ $? -eq 0 ]; then
            echo "Server is up and running!"
          else
            echo "Server failed to start!"
            exit 1
          fi

          

      - name: Get URL Our Sites
        run : |
         echo " Visit Your Site: http://${{ steps.get-ip.outputs.ip-address }}:3000"






